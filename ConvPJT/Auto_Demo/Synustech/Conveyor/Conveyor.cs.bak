using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using WMX3ApiCLR;
using static Synustech.G_Var;
using System.Linq;
using System.IO;
using System.Security.Cryptography;

namespace Synustech
{
    public abstract partial class Conveyor
    {
        public AutoStep prestep;

        public bool SCnvCSTDetected = false;
        public bool SCnVCSTBoth;
        public bool LCnvCSTDetected;
        public bool LCnVCSTBoth;

        /// <summary>
        /// Turn Sensor 변수
        /// </summary>
        public bool TcvLoadDetect;
        public bool TcvUnloadDetect;
        public bool TcvPos_90_DegDetect;
        public bool TcvPos_180_DegDetect;
        public bool TcvPos_270_DegDetect;

        public bool FinalConv = false;
        public bool FirstConv = false;

        protected int stepCnv;
        protected int oldStepCnv;
        protected int countConv;

        public bool NCV_AutoStopEnable;
        public bool NCV_AutoRunning = false;
        public bool NCV_CycleRunning = false;
        public bool TCV_InitComp = false;
        public bool InitComp = false;

        public Conveyor beforeconv = null;
        public Conveyor nextconv = null;
        public int step
        {
            get { return stepCnv; }
            set { stepCnv = value; }
        }
        public int oldstep
        {
            get { return oldStepCnv; }
            set { oldStepCnv = value; }
        }
        public int count
        {
            get { return countConv; }
            set { countConv = value; }
        }
        private Thread JogThread;
        private bool isJogging;
        public bool IsRunning { get; set; } = false;
        public enum RunDirection
        {
            LowCw,
            HighCw,
            LowCcw,
            HighCcw,
        }
        public enum CnvRun
        {
            Stop,
            Run
        }
        public enum Idle
        {
            Idle,
            Busy
        }
        public enum TurnStatus
        {
            Load,
            Busy,
            Unload,
        }
        /// <summary>
        /// 일반 컨베이어 동작에 대한 정의
        /// </summary>
        public enum AutoStep
        {
            Step000_Check_Direction = 0,

            Step100_InMode_Check_CST_Load_Status = 100,

            Step110_InMode_Turn_CST_Load_Status = 110,

            // Axis Step 정의
            Step200_InMode_Start_CST_Pass_CV_to_CV = 200,
            Step210_InMode_Move_CV_Rolling_In = 210,
            Step215_InMode_Move_CV_Slow = 215,
            Step220_InMode_Run_Condition_Check = 220,
            Step230_InMode_Move_CV_Stop = 230,
            Step240_InMode_Check_CST_ID = 240,
            Step250_InMode_Move_CV_Rolling_Out = 250,
            Step255_InMode_Wait_NextConv = 255,
            Step260_InMode_Unload_Turn_Stop = 260,
            Step270_InMode_Move_CST_Pass_CV_to_TCV = 270,
            Step275_InMode_Change_210 = 275,

            Step300_OutMode_Check_CST_Load_Status = 300,


            Step400_OutMode_Start_CST_Pass_NCV_to_NCV = 400,
            Step410_OutMode_Move_CV_Rolling_out = 410,
            Step415_OutMode_Move_CV_Slow = 415,
            Step420_OutMode_Run_Condition_Check = 420,
            Step430_OutMode_Move_CV_Stop = 430,
            Step440_OutMode_Check_CST_ID = 440,
            Step450_OutMode_Move_CV_Rolling_Out = 450,
            Step455_OutMode_Wait_NextConv = 455,
            Step460_OutMode_Unload_Turn_Stop = 460,
            Step470_OutMode_Move_CST_Pass_CV_to_TCV = 470,
            Step475_OutMode_Change_410 = 475,

            Step500_InMode_Get_CST_Rolling = 500,
            Step600_OutMode_Get_CST_Rolling = 600,

            // Turn Axis Step 정의
            Step710_InMode_Move_T_0_Deg = 710, // Loading Pos 외 다른 Pos Sensor Check시 int();
            Step720_InMode_Move_T_Stop = 720,
            Step730_InMode_Unload_Move = 730,
            Step740_InMode_Unload_Stop = 740,
            Step750_InMode_Return_T_Move = 750,
            Step760_InMode_LoadReady_T = 760,

            Step810_OutMode_Move_T_Unload = 810,
            Step820_OutMode_Move_T_Stop = 820,
            Step830_OutMode_Load_Move = 830,
            Step840_OutMode_Load_Stop = 840,
            Step850_OutMode_Return_T_Move = 850,
            Step860_OutMode_UnloadReady_T = 860,

            Step900_Final_CV_Wait = 900,

            Step1000_FinalCVN_Wait = 1000
        }
        public enum TurnInitStep
        {
            Step000_POS_Check = 0,
            Step100_Foup_Check = 100,
            Step110_Foup_Both_Check = 110,

            Step200_Turn_Move = 200,
            Step210_Turn_Stop_Check = 210,

            Step500_Turn_Init_Done = 500,

        }
        public enum InitStep
        {
            Step000_Foup_Check = 0,
            Step100_Move = 100,

            Step500_Init_Done = 500,
        }
        public int LoadLocation = 0;
        public int UnloadLocation = 0;

        public double LoadPos;
        public double LoadInterlock_Plus;
        public double LoadInterlock_Minus;

        public double UnloadPos;
        public double UnloadInterlock_Plus;
        public double UnloadInterlock_Minus;

        public bool IsInitDone = false;
        public enum LineDirection
        {
            Input,
            Output
        }
        public AutoStep CV_AutoStep = AutoStep.Step000_Check_Direction;
        public InitStep CV_InitStep = InitStep.Step000_Foup_Check;
        public TurnInitStep TCV_InitStep = TurnInitStep.Step000_POS_Check;

        public LineDirection portDirection = LineDirection.Input;
        public List<Line> lines;

        public int addr;
        public List<int> bits;
        public int addrTurn;
        public List<int> bitsTurn;
        public int bitTurn;

        public bool IsHomeDone = false;

        public RunDirection rundirection = RunDirection.HighCw;
        public CnvRun run = CnvRun.Stop;
        public ServoOnOff servo = ServoOnOff.Off;
        public ServoOnOff previousServo = ServoOnOff.Off;
        public Mode mode = Mode.Manual;
        public Mode previousMode;
        public AlarmStatus alarmstatus = AlarmStatus.OK;
        public Safety safety = Safety.NG;
        public Auto auto = Auto.Disable;
        public SensorOnOff[] SCnvFoupDetect = new SensorOnOff[2];
        public SensorOnOff[] LCnvFoupDetect = new SensorOnOff[3];
        public SensorOnOff[] POS = new SensorOnOff[4];
        public InOutMode inoutmode = InOutMode.InMode;
        public TurnStatus turnstatus = TurnStatus.Load;

        public int Axis = -1;
        public int TurnAxis = -2;
        public int ID { get; set; }
        public string type { get; set; }
        public string name;
        public double AutoVelocity = 100;
        public double AutoAcc = 150;
        public double AutoDec = 150;
        public double SlowVelocity = 20;
        public double Init_Velocity = 10;
        public bool blsAutoConv;
        public bool blsTakein, blsTakeOut;
        public bool Interface = false;



        public AlarmList m_ConveyorAlarmList;
        public Conveyor(int id, int axis, bool Isinterface)
        {
            ID = id;
            Axis = axis;
            this.lines = new List<Line>();
            bits = new List<int>();
            bitsTurn = new List<int>();
            m_ConveyorAlarmList = new AlarmList(ID);
            Interface = Isinterface;
        }
        //OHT PIO Input
        public SensorOnOff L_REQ = SensorOnOff.Off;
        public SensorOnOff UL_REQ = SensorOnOff.Off;
        public SensorOnOff READY = SensorOnOff.Off;
        public SensorOnOff HO_AVBL = SensorOnOff.Off;
        public SensorOnOff ES = SensorOnOff.Off;

        //OHT PIO Output
        public SensorOnOff VALID = SensorOnOff.Off;
        public SensorOnOff CS_0 = SensorOnOff.Off;
        public SensorOnOff TR_REQ = SensorOnOff.Off;
        public SensorOnOff BUSY = SensorOnOff.Off;
        public SensorOnOff COMPT = SensorOnOff.Off;
        /// <summary>
        /// Mode 검사
        /// </summary>
        /// <returns></returns>
        public void InmodeConvCheck()
        {
            Conveyor Beforeconveyor = conveyors.FirstOrDefault(c => c.ID == this.ID - 1);
            Conveyor Nextconveyor = conveyors.FirstOrDefault(c => c.ID == this.ID + 1);
            if (Beforeconveyor != null && Beforeconveyor.ID > 0)
            {
                beforeconv = Beforeconveyor;
            }
            if (Nextconveyor != null && Nextconveyor.ID > 0)
            {
                nextconv = Nextconveyor;
            }
        }
        public LineDirection GetOperationDirection()
        {
            bool isInputMode = CheckDirection();

            return isInputMode ? LineDirection.Input : LineDirection.Output;
        }

        private bool CheckDirection()
        {
            if(portDirection == LineDirection.Input)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// Foup이 없는 상태 검사
        /// </summary>
        public void CST_Empty_Detect()
        {
            int count = 0;
            // LFoupDetect 배열을 확인하여 자재 유무 체크
            for (int i = 0; i < SCnvFoupDetect.Length; i++)
            {
                if (SCnvFoupDetect[i] == SensorOnOff.Off) // SensorOnOff 열거형을 사용하여 센서 상태 확인
                {
                    count++;
                }

            }
            if (count > 0)
            {
                SCnvCSTDetected = true;
            }
            else
            {
                SCnvCSTDetected = false;
            }
        }
        public void LCnV_CST_Empty_Detect()
        {
            int count = 0;
            // LFoupDetect 배열을 확인하여 자재 유무 체크
            for (int i = 0; i < LCnvFoupDetect.Length; i++)
            {
                if (LCnvFoupDetect[i] == SensorOnOff.Off) // SensorOnOff 열거형을 사용하여 센서 상태 확인
                {
                    count++;
                }

            }
            if (count > 0)
            {
                LCnvCSTDetected = true;
            }
            else
            {
                LCnvCSTDetected = false;
            }
        }
        /// <summary>
        /// Foup_Detect#1,#2 모두 On 상태인지 검사
        /// </summary>
        public void CST_Check_Detect()
        {
            int count = 0;
            // FoupDetect 배열을 확인하여 자재 유무 체크
            for (int i = 0; i < SCnvFoupDetect.Length; i++)
            {
                if (SCnvFoupDetect[i] == SensorOnOff.On) // SensorOnOff 열거형을 사용하여 센서 상태 확인
                {
                    count++;
                }
            }
            if (count > 0)
            {
                SCnVCSTBoth = false;
            }
            else
            {
                SCnVCSTBoth = true;
            }
        }
        public void LCV_Inmode_CST_Check_Detect()
        {
            int count = 0;
            for (int i = 1; i < LCnvFoupDetect.Length; i++)
            {
                if (LCnvFoupDetect[i] == SensorOnOff.On)
                {
                    count++;
                }
            }
            if (count > 0)
            {
                LCnVCSTBoth = false;
            }
            else
            {
                LCnVCSTBoth = true;
            }
        }
        public void LCV_Outmode_CST_Check_Detect()
        {
            int count = 0;
            for(int i = 1; i >= 0; i--)
            {
                if (LCnvFoupDetect[i] == SensorOnOff.On)
                {
                    count++;
                }
            }
            if (count > 0)
            {
                LCnVCSTBoth = false;
            }
            else
            {
                LCnVCSTBoth = true;
            }
        }
        public void Load_POS_Check()
        {
            if (POS[LoadLocation] == SensorOnOff.On)
            {
                TcvLoadDetect = true;
            }
            else
            {
                TcvLoadDetect = false;
            }
        }
        public void Unload_POS_Check()
        {
            if (POS[UnloadLocation] == SensorOnOff.On)
            {
                TcvUnloadDetect = true;
            }
            else
            {
                TcvUnloadDetect = false;
            }
        }
        public void Load_Location_Check()
        {

        }
        /// <summary>
        /// 자재가 떠나서 Foup_Detect#2가 꺼졌는지 검사
        /// </summary>
        public bool CV_Inmode_LastFoup_Detect_Check()
        {
            bool IsLast_Foup_Exist;
            if (SCnvFoupDetect[SCnvFoupDetect.Length - 1] == SensorOnOff.Off)
            {
                IsLast_Foup_Exist = true;
            }
            else
            {
                IsLast_Foup_Exist = false;
            }
            return IsLast_Foup_Exist;
        }
        public bool CV_Outmode_LastFoup_Detect_Check()
        {
            bool IsLast_Foup_Exist;
            if (SCnvFoupDetect[0] == SensorOnOff.Off)
            {
                IsLast_Foup_Exist = true;
            }
            else
            {
                IsLast_Foup_Exist = false;
            }
            return IsLast_Foup_Exist;
        }
        public bool LCV_Inmode_LastFoup_Detect_Check()
        {
            bool IsLast_Foup_Exist;
            if (LCnvFoupDetect[LCnvFoupDetect.Length - 1] == SensorOnOff.Off)
            {
                IsLast_Foup_Exist = true;
            }
            else
            {
                IsLast_Foup_Exist = false;
            }
            return IsLast_Foup_Exist;
        }
        public bool LCV_Outmode_LastFoup_Detect_Check()
        {
            bool IsLast_Foup_Exist;
            if (LCnvFoupDetect[0] == SensorOnOff.Off)
            {
                IsLast_Foup_Exist = true;
            }
            else
            {
                IsLast_Foup_Exist = false;
            }
            return IsLast_Foup_Exist;
        }
        public void StartConveyor(double velocity)
        {

            // 컨베이어를 지정된 속도로 조그 구동
            //double speed = 50.0; // 원하는 속도 값 (예시)

            if (portDirection == LineDirection.Input)
            {
                JogPOS_Auto(velocity);
            }
            else
            {
                JogNEG_Auto(velocity);
            }

        }

        public void StopConveyor()
        {
            JogSTOP();
        }
        public abstract void Auto_Start_CV_Control();
        public void JogPOS(double speed)
        {
            double velocity = speed;
            w_motion.StartJogPos(Axis, velocity);
        }
        public void JogNEG(double speed)
        {
            double velocity = speed;
            w_motion.StartJogNeg(Axis, velocity);
        }
        public void TurnJogPos(double speed)
        {
            double velocity = speed;
            w_motion.StartJogPos(TurnAxis, velocity);
        }
        public void TurnJogNeg(double speed)
        {
            double velocity = speed;
            w_motion.StartJogNeg(TurnAxis, velocity);
        }
        public void JogPOS_Auto(double speed)
        {
            double velocity = speed;
            double acc = AutoAcc;
            double dec = AutoDec;
            w_motion.StartJogPos_Auto(Axis, velocity, acc, dec);
        }
        public void JogNEG_Auto(double speed)
        {
            double velocity = speed;
            double acc = AutoAcc;
            double dec = AutoDec;
            w_motion.StartJogNeg_Auto(Axis, velocity, acc, dec);
        }
        public void JogSTOP()
        {
            w_motion.StopJog(Axis);
        }
        public void TurnJogPOS(double speed)
        {
            double velocity = speed;
            double acc = AutoAcc;
            double dec = AutoDec;
            w_motion.StartJogPos_Auto(TurnAxis, velocity, acc, dec);
        }
        public void TurnJogNEG(double speed)
        {
            double velocity = speed;
            double acc = AutoAcc;
            double dec = AutoDec;
            w_motion.StartJogNeg_Auto(TurnAxis, velocity, acc, dec);
        }
        public void TurnJogSTOP()
        {
            w_motion.StopJog(TurnAxis);
        }
        public void Absolute_Turn_Move_Load()
        {
            w_motion.AbsoluteMove(w_motion.m_AxisProfile[TurnAxis],LoadPos);
        }
        public void Absolute_Turn_Move_Unload()
        {
            w_motion.AbsoluteMove(w_motion.m_AxisProfile[TurnAxis], UnloadPos);
        }
        /// <summary>
        /// Init 동작
        /// </summary>
        public virtual void Init() { }
        /// <summary>
        /// Turn Init 동작
        /// </summary>
        public virtual void Turn_Init() { }
        public virtual void AddrUpdate()
        {
            addr = 8 + (Axis * 4);
        }
        public void AutoMode()
        {
            mode = Mode.Auto;
        }
        public void ManualMode()
        {
            mode = Mode.Manual;
        }

    }
}
